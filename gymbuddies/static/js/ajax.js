// dashboard setup
// function dashsetup() {
//   $("#day-schedule").dayScheduleSelector({
//     days: [0, 1, 2, 3, 4, 5, 6],
//     interval: 60,
//     startTime: '06:00',
//     endTime: '24:00'
//   });
//   const calendar = '{{ jsoncalendar|safe }}'
//   const parsed = JSON.parse(calendar)
//   console.log(calendar, parsed)

//   $("#day-schedule").data("artsy.dayScheduleSelector").deserialize(parsed);
//   $("#day-schedule").on('selected.artsy.dayScheduleSelector', function (e, selected) {
//     console.log(selected);
//   })

// }

ajaxtimeout = 10000;

let lastrefreshed = 0;
let request = null;
let getrequest = null;
let postrequest = null;

// from buddies.html
// Submits a request when "Match" button is pressed
function makeMatch() {
  const calendar = $("#day-schedule").data("artsy.dayScheduleSelector").serialize();
  let destnetid = $('#matchRequest').val();
  let sessionindex = $('#indexInput').val();
  console.log(destnetid)
  if (request != null)
    request.abort();

  $.ajax({
    type: 'POST',
    url: '/matching/findabuddy',
    data: { "destnetid": destnetid, "index": sessionindex, "jsoncalendar": JSON.stringify(calendar) },
    error: function(xhr, textstatus, errorthrown) {
      console.log(xhr, textstatus, errorthrown)
    }
  })
}

// from findabuddy.html
// goes to profile
function goProfile() {
  request = $.ajax(
    {
      url: '/home/profile'
    }
  );
}

// sends a match request by submitting data to "/matching/findabuddy"
function sendReq() {
  let destnetid = $('#matchRequest').val();
  let sessionindex = $('#indexInput').val();
  console.log(destnetid)
  if (request != null)
    request.abort();
  request = $.ajax(
    {
      type: 'POST',
      data: { "destnetid": destnetid, "index": sessionindex },
      url: '/matching/findabuddy'
    }
  );
}

// takes response generated by getBuddies() and inserts html in #buddies span tag above
function listBuddies(response) {
  $('#buddies').html(response);
}

// gets the next potential match from list
function getBuddies() {
  let sessionindex = $('#indexInput').val();
  console.log(sessionindex)
  if (request != null)
    request.abort();


  $("body").addClass("wait");
  request = $.ajax(
    {
      type: 'GET',
      data: { "index": sessionindex },
      url: '/matching/buddies',
      success: listBuddies,
      complete: function() { $("body").removeClass("wait"); },
    }
  );
}

// from incoming.html
function fillCard(response) {
  console.log("got a response");
  $('#userPopup').html(response);
}


function getCard(requestid, url) {
  if (getrequest != null) {
    console.log("aborting other getrequests!");
    getrequest.abort();
  }

  getrequest = $.ajax({
    type: 'GET',
    data: { "requestid": requestid },
    url: url,
    success: fillCard,
    complete: function() { getrequest = null; },
    error: function() { console.log("getCard failed!"); },
    timeout: ajaxtimeout,
  });
}

function listRequests(response) {
  if (response) {
    lastrefreshed = Date.now();
    $('#requestTable').html(response);
    console.log("making an update now!", Date.now())
  }
}

// from matched.html
// generates list of matches
function listMatches(response) {
  if (response) {
    lastrefreshed = Date.now();
    $('#matchesTable').html(response);
    console.log("making an update now!", Date.now())
  }
}

// generates history of matches
function listHistory(response) {
  if (response) {
    lastrefreshed = Date.now();
    $('#historyTable').html(response);
    console.log("making an update now!", Date.now())
  }
}

// used as the 'success' property of an ajax request argument. Requires an
// 'id' property to be provided to indicate where to write the response.
function success(response) {
  if (response) {
    lastrefreshed = Date.now();
    $(this.id).html(response);
    console.log("making an update now!");
  }
  console.log("success: no update required.");
}

// used as the 'error' property of an ajax request argument.
function error(xhr, textStatus, errorThrown) {
  console.log(xhr, textStatus, errorThrown);
  if (textStatus == "timeout") {
    ajaxtimeout *= 2;
    console.log("doubled ajaxtimeout to ", ajaxtimeout, this);
  } else if (textStatus != "abort") {
    $("#errorPopup").modal("show");
  }
}

function act(url, id, requestid, action) {
  if (postrequest != null) {
    console.log("postrequest already in process! breaking!");
    return;
  }

  $("body").addClass("wait");
  postrequest = $.ajax({
    type: "POST",
    data: { "requestid": requestid, "action": action },
    url: url,
    id: id,
    success: success,
    complete: function() { postrequest = null; $("body").removeClass("wait"); },
    error: error,
    timeout: ajaxtimeout,
  });
}

function refresh(url, id) {
  if (getrequest != null || postrequest != null) {
    console.log("getrequest/postrequest detected!");
    return;
  }

  getrequest = $.ajax({
    type: "GET",
    data: { "lastrefreshed": lastrefreshed },
    url: url,
    id: id,
    success: success,
    complete: function() { getrequest = null; },
    error: error,
    timeout: ajaxtimeout,
  })
}

function refreshMultiple(url_ids) {
  console.log("url_ids: ", url_ids)
  for (const [url, id] of url_ids) {
    console.log("url_id", url, id)
    if (getrequest != null || postrequest != null) {
      console.log("getrequest/postrequest detected!");
      return;
    }

    getrequest = $.ajax({
      type: "GET",
      data: { "lastrefreshed": lastrefreshed },
      url: url,
      id: id,
      success: success,
      complete: function() { getrequest = null; },
      error: error,
      timeout: ajaxtimeout,
    })
  }
}


// from matched.html
function fillMatchedCard(response) {
  console.log("got a response");
  $('#modifyPopup').html(response);
}


function getMatchedCard(requestid, url) {
  if (getrequest != null) {
    console.log("aborting other getrequests!");
    getrequest.abort();
  }

  getrequest = $.ajax({
    type: 'GET',
    data: { "requestid": requestid },
    url: url,
    success: fillMatchedCard,
    complete: function() { getrequest = null; },
    error: function() { console.log("getMatchedCard failed!"); },
    timeout: ajaxtimeout,
  });
}
